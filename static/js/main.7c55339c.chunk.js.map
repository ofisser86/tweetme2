{"version":3,"sources":["logo.svg","lookup/components.js","tweets/components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","loadTweets","callback","method","endpoint","data","jsonData","JSON","stringify","xhr","XMLHttpRequest","url","responseType","open","onload","response","status","onerror","e","console","log","send","lookup","TweetsComponent","props","texAreaRef","React","createRef","useState","newTweets","setNewTweets","className","onSubmit","event","preventDefault","newVal","current","value","tempNewTweets","unshift","content","likes","id","ref","required","type","name","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","tweetsDidSet","setTweetsDidSet","useEffect","final","concat","length","alert","map","item","index","Tweet","tweet","key","ActionBtn","action","setLikes","userLike","setUserLike","actionDisplay","display","onClick","App","src","logo","alt","href","target","rel","Boolean","window","location","hostname","match","appEl","document","getElementById","ReactDOM","render","StrictMode","tweetEl","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7c55339c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","function lookup(method, endpoint, callback, data) {\n    let jsonData\n    if (data){\n        jsonData = JSON.stringify(data)\n    }\n    const xhr = new XMLHttpRequest()\n    const url = `http://localhost:8000/api/${endpoint}/`\n    xhr.responseType = \"json\"\n    xhr.open(method, url)\n    xhr.onload = function() {\n      callback(xhr.response, xhr.status)\n    }\n    xhr.onerror = function (e) {\n      console.log(e)\n      callback({\"message\": \"The request was an error\"}, 400)\n    }\n    xhr.send(jsonData)\n\n\n}\nexport function loadTweets(callback) {\n    lookup(\"GET\", \"tweets\", callback)\n    const xhr = new XMLHttpRequest()\n    const method = 'GET' // \"POST\"\n    const url = \"http://localhost:8000/api/tweets/\"\n    const responseType = \"json\"\n    xhr.responseType = responseType\n    xhr.open(method, url)\n    xhr.onload = function() {\n      callback(xhr.response, xhr.status)\n    }\n    xhr.onerror = function (e) {\n      console.log(e)\n      callback({\"message\": \"The request was an error\"}, 400)\n    }\n    xhr.send()\n  }","import React, {useEffect, useState}  from 'react'\n\nimport {loadTweets} from '../lookup'\n\n\nexport function TweetsComponent(props){\n    const texAreaRef = React.createRef()\n    const [newTweets, setNewTweets] = useState([])\n    const handleSubmit = (event) => {\n        event.preventDefault()\n        const newVal = texAreaRef.current.value\n        let tempNewTweets = [...newTweets]\n        tempNewTweets.unshift({\n            content: newVal,\n            likes: 0,\n            id: 1233213,\n        })\n        setNewTweets(tempNewTweets)\n        texAreaRef.current.value = ''\n    }\n    return(\n    <div className={props.className}>\n        <div className='col-md-12 mb-3'>\n            <form onSubmit={handleSubmit}>\n                <textarea ref={texAreaRef} required={true} className=\"form-control\" >\n\n                </textarea>\n            <button type=\"submit\" className=\"btn btn-primary my-3\" name=\"tweet\">Tweet</button>\n            </form>\n\n        </div>\n        <TweetsList newTweets={newTweets}/>\n    </div>\n\n    )\n}\n\nexport function TweetsList(props) {\n    const [tweetsInit, setTweetsInit] = useState(props.newTweets ? props.newTweets : [])\n    const [tweets, setTweets] = useState([])\n    const [tweetsDidSet, setTweetsDidSet] = useState(false)\n    useEffect(()=>{\n        const final = [...props.newTweets].concat(tweetsInit)\n        if (final.length !== tweets.length){\n            setTweets(final)\n\n        }\n    }, [props.newTweets, tweets, tweetsInit])\n\n    useEffect(() => {\n      if (tweetsDidSet === false){\n          const myCallback = (response, status) => {\n            if (status === 200){\n              // const finalTweetsInit = [...response].concat(tweetsInit)\n              // setTweetsInit(finalTweetsInit)\n              setTweetsInit(response)\n              setTweetsDidSet(true)\n            } else {\n              alert(\"There was an error\")\n            }\n          }\n          loadTweets(myCallback)\n          }\n    }, [tweetsInit, tweetsDidSet, setTweetsDidSet])\n    return tweets.map((item, index)=>{\n      return <Tweet tweet={item} className='my-5 py-5 border bg-white text-dark' key={`${index}-{item.id}`} />\n    })\n  }\n\n\nexport function ActionBtn(props) {\n    const {tweet, action} = props\n    const [likes, setLikes] = useState(tweet.likes ? tweet.likes : 0)\n    const [userLike, setUserLike] = useState(tweet.userLike === true ? true : false)\n    const className = props.className ? props.className : 'btn btn-primary btn-sm'\n    const actionDisplay = action.display ? action.display : \"Action\"\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : actionDisplay\n\n    const handleClick = (event) => {\n      event.preventDefault()\n      if (action.type === 'like') {\n        if (userLike === true) {\n          // perhaps i Unlike it?\n          setLikes(likes - 1)\n          setUserLike(false)\n        } else {\n          setLikes(likes + 1)\n          setUserLike(true)\n        }\n\n      }\n    }\n    return <button className={className} onClick={handleClick}>{display}</button>\n  }\n\nexport function Tweet(props) {\n    const {tweet} = props\n    const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\n    return <div className={className}>\n        <p>{tweet.id} - {tweet.content}</p>\n        <div className='btn btn-group'>\n          <ActionBtn tweet={tweet} action={{type: \"like\", display:\"Likes\"}}/>\n          <ActionBtn tweet={tweet} action={{type: \"unlike\", display:\"Unlike\"}}/>\n          <ActionBtn tweet={tweet} action={{type: \"unlike\", display:\"Retweet\"}}/>\n        </div>\n    </div>\n  }","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {TweetsComponent} from './tweets'\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n          <TweetsComponent />\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {TweetsComponent} from \"./tweets\";\n\nimport * as serviceWorker from './serviceWorker';\n\n\nconst appEl = document.getElementById('root')\nif (appEl){\n    ReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  appEl\n);\n}\n\nconst tweetEl = document.getElementById('tweetMe-2')\nif (tweetEl){\n    ReactDOM.render(\n  <React.StrictMode>\n    <TweetsComponent />\n  </React.StrictMode>,\n  tweetEl\n);\n}\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}