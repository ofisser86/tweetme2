{"version":3,"sources":["logo.svg","lookup/components.js","tweets/buttons.js","tweets/lookup.js","tweets/create.js","tweets/detail.js","tweets/list.js","tweets/components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","backendLookup","method","endpoint","callback","data","jsonData","JSON","stringify","xhr","XMLHttpRequest","url","responseType","csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","open","setRequestHeader","onload","status","response","detail","window","location","href","indexOf","onerror","e","send","ActionBtn","props","tweet","action","didPerformAction","likes","className","actionDisplay","display","handleActionBackendEvent","console","log","type","onClick","event","preventDefault","tweetId","id","apiTweetAction","TweetCreate","textAreaRef","React","createRef","didTweet","handleBackendUpdate","alert","onSubmit","newVal","current","value","content","ref","required","ParentTweet","parent","Tweet","hideActions","didRetweet","useState","actionTweet","setActionTweet","match","pathname","urlTweetId","groups","tweetid","isDetail","handlePerformAction","newActionTweet","Fragment","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","tweetsDidSet","setTweetsDidSet","useEffect","final","newTweets","concat","username","apiTweetList","handleDidRetweet","newTweet","updateTweetsInit","unshift","updateFinalTweets","map","item","index","key","TweetsComponent","setNewTweets","canTweet","tempNewTweets","TweetDetailComponent","didLookup","setDidLookup","setTweet","handleBackendLookup","apiTweetDetail","App","src","logo","alt","target","rel","Boolean","hostname","appEl","getElementById","ReactDOM","render","createElement","tweetsEl","dataset","querySelectorAll","forEach","container","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0e116ab1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","function getCookie(name) {\n  var cookieValue = null;\n  if (document.cookie && document.cookie !== '') {\n      var cookies = document.cookie.split(';');\n      for (var i = 0; i < cookies.length; i++) {\n          var cookie = cookies[i].trim();\n          // Does this cookie string begin with the name we want?\n          if (cookie.substring(0, name.length + 1) === (name + '=')) {\n              cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n              break;\n          }\n      }\n  }\n  return cookieValue;\n}\n\nexport function backendLookup(method, endpoint, callback, data) {\n  let jsonData;\n  if (data){\n    jsonData = JSON.stringify(data)\n  }\n  const xhr = new XMLHttpRequest()\n  const url = `http://localhost:8000/api${endpoint}`\n  xhr.responseType = \"json\"\n  const csrftoken = getCookie('csrftoken');\n  xhr.open(method, url)\n  xhr.setRequestHeader(\"Content-Type\", \"application/json\")\n\n  if (csrftoken){\n    // xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\", \"XMLHttpRequest\")\n    xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\")\n    xhr.setRequestHeader(\"X-CSRFToken\", csrftoken)\n  }\n\n  xhr.onload = function() {\n    if (xhr.status === 403) {\n      const detail = xhr.response.detail\n      if (detail === \"Authentication credentials were not provided.\"){\n        if (window.location.href.indexOf(\"login\") === -1) {\n          window.location.href = \"/login?showLoginRequired=true\"\n        }\n      }\n    }\n    callback(xhr.response, xhr.status)\n  }\n  xhr.onerror = function (e) {\n    callback({\"message\": \"The request was an error\"}, 400)\n  }\n  xhr.send(jsonData)\n}","import React from 'react'\n\nimport {apiTweetAction} from './lookup'\n\n\nexport function ActionBtn(props) {\n    const {tweet, action, didPerformAction} = props\n    const likes = tweet.likes ? tweet.likes : 0\n    const className = props.className ? props.className : 'btn btn-primary btn-sm'\n    const actionDisplay = action.display ? action.display : 'Action'\n\n    const handleActionBackendEvent = (response, status) =>{\n      console.log(response, status)\n      if ((status === 200 || status === 201) && didPerformAction){\n        didPerformAction(response, status)\n      }\n    }\n    const handleClick = (event) => {\n      event.preventDefault()\n      apiTweetAction(tweet.id, action.type, handleActionBackendEvent)\n\n    }\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : actionDisplay\n    return <button className={className} onClick={handleClick}>{display}</button>\n  }","import {backendLookup} from '../lookup'\n\nexport function apiTweetCreate(newTweet, callback){\n    backendLookup(\"POST\", \"/tweets/create/\", callback, {content: newTweet})\n  }\n\nexport function apiTweetAction(tweetId, action, callback){\n    const data = {id: tweetId, action: action}\n    backendLookup(\"POST\", \"/tweets/action/\", callback, data)\n}\n\nexport function apiTweetDetail(tweetId, callback) {\n    backendLookup(\"GET\", `/tweets/${tweetId}/`, callback)\n}\n\nexport function apiTweetList(username, callback) {\n    let endpoint =  \"/tweets/\"\n    if (username){\n        endpoint =  `/tweets/?username=${username}`\n    }\n    backendLookup(\"GET\", endpoint, callback)\n}","import React from 'react'\nimport {apiTweetCreate} from './lookup'\n\n\nexport function TweetCreate(props){\n  const textAreaRef = React.createRef()\n  const {didTweet} = props\n    const handleBackendUpdate = (response, status) =>{\n      if (status === 201){\n        didTweet(response)\n      } else {\n        console.log(response)\n        alert(\"An error occured please try again\")\n      }\n    }\n\n    const handleSubmit = (event) => {\n      event.preventDefault()\n      const newVal = textAreaRef.current.value\n      // backend api request\n      apiTweetCreate(newVal, handleBackendUpdate)\n      textAreaRef.current.value = ''\n    }\n    return <div className={props.className}>\n          <form onSubmit={handleSubmit}>\n            <textarea ref={textAreaRef} required={true} className='form-control' name='tweet'>\n\n            </textarea>\n            <button type='submit' className='btn btn-primary my-3'>Tweet</button>\n        </form>\n  </div>\n}","import React, {useState}  from 'react'\n\nimport {ActionBtn} from './buttons'\n\nexport function ParentTweet(props){\n    const {tweet} = props\n    return tweet.parent ? <div className='row'>\n    <div className='col-11 mx-auto p-3 border rounded'>\n      <p className='mb-0 text-muted small'>Retweet</p>\n      <Tweet hideActions className={' '} tweet={tweet.parent} />\n    </div>\n    </div> : null\n  }\n  export function Tweet(props) {\n      const {tweet, didRetweet, hideActions} = props\n      const [actionTweet, setActionTweet] = useState(props.tweet ? props.tweet : null)\n      const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\n      const path = window.location.pathname\n      const match = path.match(/(?<tweetid>\\d+)/)\n      const urlTweetId = match ? match.groups.tweetid : -1\n      const isDetail = `${tweet.id}` === `${urlTweetId}`\n\n      const handleLink = (event) => {\n        event.preventDefault()\n        window.location.href = `/${tweet.id}`\n      }\n      const handlePerformAction = (newActionTweet, status) => {\n        if (status === 200){\n          setActionTweet(newActionTweet)\n        } else if (status === 201) {\n          if (didRetweet){\n            didRetweet(newActionTweet)\n          }\n        }\n\n      }\n\n      return <div className={className}>\n              <div>\n                <p>{tweet.id} - {tweet.content}</p>\n                <ParentTweet tweet={tweet} />\n              </div>\n          <div className='btn btn-group'>\n          {(actionTweet && hideActions !== true) && <React.Fragment>\n                  <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{type: \"like\", display:\"Likes\"}}/>\n                  <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{type: \"unlike\", display:\"Unlike\"}}/>\n                  <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{type: \"retweet\", display:\"Retweet\"}}/>\n                </React.Fragment>\n          }\n                  {isDetail === true ? null : <button className='btn btn-outline-primary btn-sm' onClick={handleLink}>View</button>}\n                </div>\n\n      </div>\n    }","import React, {useEffect, useState}  from 'react'\n\nimport {apiTweetList} from './lookup'\n\nimport {Tweet} from './detail'\n\nexport function TweetsList(props) {\n    const [tweetsInit, setTweetsInit] = useState([])\n    const [tweets, setTweets] = useState([])\n    const [tweetsDidSet, setTweetsDidSet] = useState(false)\n    useEffect(()=>{\n      const final = [...props.newTweets].concat(tweetsInit)\n      if (final.length !== tweets.length) {\n        setTweets(final)\n      }\n    }, [props.newTweets, tweets, tweetsInit])\n\n    useEffect(() => {\n      if (tweetsDidSet === false){\n        const handleTweetListLookup = (response, status) => {\n          if (status === 200){\n            setTweetsInit(response)\n            setTweetsDidSet(true)\n          } else {\n            alert(\"There was an error\")\n          }\n        }\n        apiTweetList(props.username, handleTweetListLookup)\n      }\n    }, [tweetsInit, tweetsDidSet, setTweetsDidSet, props.username])\n\n\n    const handleDidRetweet = (newTweet) => {\n      const updateTweetsInit = [...tweetsInit]\n      updateTweetsInit.unshift(newTweet)\n      setTweetsInit(updateTweetsInit)\n      const updateFinalTweets = [...tweets]\n      updateFinalTweets.unshift(tweets)\n      setTweets(updateFinalTweets)\n    }\n    return tweets.map((item, index)=>{\n      return <Tweet\n        tweet={item}\n        didRetweet={handleDidRetweet}\n        className='my-5 py-5 border bg-white text-dark'\n        key={`${index}-{item.id}`} />\n    })\n  }","import React, {useEffect, useState}  from 'react'\n\nimport {TweetCreate} from './create'\nimport {Tweet} from './detail'\nimport {apiTweetDetail} from './lookup'\nimport {TweetsList} from './list'\n\n\nexport function TweetsComponent(props) {\n    const [newTweets, setNewTweets] = useState([])\n    const canTweet = props.canTweet === \"false\" ? false : true\n    const handleNewTweet = (newTweet) =>{\n      let tempNewTweets = [...newTweets]\n      tempNewTweets.unshift(newTweet)\n      setNewTweets(tempNewTweets)\n    }\n    return <div className={props.className}>\n            {canTweet === true && <TweetCreate didTweet={handleNewTweet} className='col-12 mb-3' />}\n          <TweetsList newTweets={newTweets} {...props} />\n    </div>\n}\n\n\nexport function TweetDetailComponent(props){\n  const {tweetId} = props\n  const [didLookup, setDidLookup] = useState(false)\n  const [tweet, setTweet] = useState(null)\n\n  const handleBackendLookup = (response, status) => {\n    if (status === 200) {\n      setTweet(response)\n    } else {\n      alert(\"There was an error finding your tweet.\")\n    }\n  }\n  useEffect(()=>{\n    if (didLookup === false){\n\n      apiTweetDetail(tweetId, handleBackendLookup)\n      setDidLookup(true)\n    }\n  }, [tweetId, didLookup, setDidLookup])\n\n  return tweet === null ? null : <Tweet tweet={tweet} className={props.className} />\n }","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {TweetsComponent} from './tweets'\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n          <TweetsComponent />\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {TweetsComponent, TweetDetailComponent} from './tweets'\nimport * as serviceWorker from './serviceWorker';\n\nconst appEl = document.getElementById('root')\nif (appEl) {\n    ReactDOM.render(<App />, appEl);\n}\nconst e = React.createElement\nconst tweetsEl = document.getElementById(\"tweetme-2\")\nif (tweetsEl) {\n    ReactDOM.render(\n        e(TweetsComponent, tweetsEl.dataset), tweetsEl);\n}\n\nconst tweetDetailElements = document.querySelectorAll(\".tweetme-2-detail\")\n\ntweetDetailElements.forEach(container=> {\n    ReactDOM.render(\n        e(TweetDetailComponent, container.dataset),\n        container);\n})\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}